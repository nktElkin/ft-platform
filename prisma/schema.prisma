datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Moved the URL placeholder to a more secure .env standard practice
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// addtional enum for identifying user roles
enum UserRole {
  ROOT
  TUTOR
  STUDENT
}

// basic models from the next-auth + prisma example, updated for mongodb
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?
  sory         String?

  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(STUDENT)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // relations with other models
  parentUserId String?      @db.ObjectId
  parentUser   User?        @relation("Parent", fields: [parentUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childUser   User[]       @relation("Parent")
  courses     Course[]

}
 

// Auth modeles
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}


// specific models design for current project
model Course {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  wallpaperUrl String?
  title        String
  description  String?  
  authorId     String      @db.ObjectId
  categoryId   String      @db.ObjectId
  category     Category    @relation(fields: [categoryId], references: [id]) 
  author       User     @relation(fields: [authorId], references: [id])
  isPublished  Boolean     @default(false)
  courseModules CourseModule[]
  @@map("courses")
  @@index([authorId])
  @@index([categoryId])
}

// model Attachment presents the array of Url for the CourseModule
model Attachment {
  id  String @id @map("_id") @db.String //id is passing by GCS
  altText          String?  @db.String
  description String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  url          String
  courseModuleId  String   @db.ObjectId
  courseModule           CourseModule   @relation(fields: [courseModuleId], references: [id], onDelete: Cascade)
  @@map("attachments")
  @@index([courseModuleId])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryName String  @unique
  description String?
  courses     Course[]
  @@map("categories")
}


model CourseModule{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  moduleContent  String?
  description  String?
  attachments  Attachment[]
  isPublished  Boolean     @default(false)
  index        Int         @default(0)
  userProgress UserProgress[]

  courseId     String      @db.ObjectId
  course       Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@map("courseModules")
  @@index([courseId])
}

model UserProgress{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  isDone     Boolean         @default(false)
  userId       String      @db.ObjectId
  courseModuleId String   @db.ObjectId
  courseModule CourseModule @relation(fields: [courseModuleId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([courseModuleId])
  @@unique([userId, courseModuleId]) //the combination of user and their progress must be uniqueq for each course, so just one unique combination for user<->courseModule

  // no direct relation to User, as progress depends on the courseModule, not on user
}
